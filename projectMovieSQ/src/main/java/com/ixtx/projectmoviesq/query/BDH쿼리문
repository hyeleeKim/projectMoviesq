################################### reserve 관련 ###############################################################
# 연습
# LEFT 조인
SELECT *
FROM `movie_sq`.`screen_schedules` AS A
         LEFT JOIN `movie_sq`.`movies` AS B
                   ON A.`movie_index` = B.`index`;

# RIGHT 조인
SELECT *
FROM `movie_sq`.`screen_schedules` AS A
         RIGHT JOIN `movie_sq`.`movies` AS B
                    ON A.`movie_index` = B.`index`;

# LEFT 조인(IS NULL)
SELECT *
FROM `movie_sq`.`screen_schedules` AS A
         LEFT JOIN `movie_sq`.`movies` AS B
                   ON A.`movie_index` = B.`index`
WHERE B.`index` IS NULL;

# RIGHT 조인(IS NULL)
SELECT *
FROM `movie_sq`.`screen_schedules` AS A
         RIGHT JOIN `movie_sq`.`movies` AS B
                    ON A.`movie_index` = B.`index`
WHERE B.`index` IS NULL;

# INNER 조인
SELECT *
FROM `movie_sq`.`screen_schedules` AS A
         INNER JOIN `movie_sq`.`movies` AS B
                    ON A.`movie_index` = B.`index`;

# FULL OUTER 조인 => MySQL, MariaDB는 FULL OUTER JOIN이 존재 하지않음
# LEFT 조인과 RIGHT 조인을 UNION으로 묶어 조회 가능하다.
SELECT *
FROM `movie_sq`.`screen_schedules` AS A
         LEFT JOIN `movie_sq`.`movies` AS B
                   ON A.movie_index = B.`index`
UNION
SELECT *
FROM `movie_sq`.`screen_schedules` AS A
         RIGHT JOIN `movie_sq`.`movies` AS B
                    ON A.movie_index = B.`index`;

# 합집합-교집합 조인
SELECT *
FROM `movie_sq`.`screen_schedules` AS A
         LEFT JOIN `movie_sq`.`movies` AS B
                   ON A.`movie_index` = B.`index`
WHERE B.`index` IS NULL
UNION
SELECT *
FROM `movie_sq`.`screen_schedules` AS A
         RIGHT JOIN `movie_sq`.`movies` AS B
                    ON A.`movie_index` = B.`index`
WHERE A.`movie_index` IS NULL;


######################### reserve 관련 CREATE 테이블 ####################################
# 최종 상영관 테이블
CREATE TABLE IF NOT EXISTS `movie_sq`.`screens`
(
    `index`         INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
    `theater_index` INT(10) UNSIGNED NOT NULL,
    `name`          VARCHAR(30)      NOT NULL,
    `seat_total`    INT(10) UNSIGNED NOT NULL,
    `seats_map`     LONGBLOB         NOT NULL,
    PRIMARY KEY (`index`),
    UNIQUE KEY (`index`, `theater_index`, `name`, `seat_total`), # 두 개를 묶어 놔야 해당 두 개의 값들만 "테스트 상영스케쥴 테이블"에 해당한 것만 삽입 가능하다.
    CONSTRAINT FOREIGN KEY (`theater_index`) REFERENCES `movie_sq`.`theaters` (`index`) ON DELETE CASCADE ON UPDATE CASCADE
);

# 최종 상영스케쥴 테이블
CREATE TABLE IF NOT EXISTS `movie_sq`.`screen_schedules`
(
    `index`         INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
    `movie_index`   INT(10) UNSIGNED NOT NULL,
    `theater_index` INT(10) UNSIGNED NOT NULL,
    `screen_index`  INT(10) UNSIGNED NOT NULL,
    `time_start`    DATETIME         NOT NULL,
    `time_end`      DATETIME         NOT NULL,
    CONSTRAINT PRIMARY KEY (`index`),

    CONSTRAINT UNIQUE KEY (`screen_index`, `time_start`), # 같은 상영관, 같은 시간대에선 두개의 영화가 동시에 이루어질 수 없게 해야하므로


    CONSTRAINT UNIQUE KEY (`index`, `screen_index`),      # seat_status의 외부키 참조를 위해 설정


    CONSTRAINT FOREIGN KEY (`movie_index`) REFERENCES `movie_sq`.`movies` (`index`)
        ON DELETE CASCADE ON UPDATE CASCADE,
    CONSTRAINT FOREIGN KEY (`theater_index`, `screen_index`) REFERENCES `movie_sq`.`screens` (`theater_index`, `index`)
        ON DELETE CASCADE ON UPDATE CASCADE,              # `moviesq`.`test_screens`의 `theater_index`, `index`는 두 개가 하나로 된 유니크 키이다. 이는 `theater_index`, `screen_index` 가 `theater_index`, `index` 를  순서대로 1:1 대응으로 참조한다.
    CONSTRAINT CHECK (`time_start` < `time_end`)          # 이건 행 하나에서만 이루어지는 제약
);

# 최종 상영 스케쥴 테이블 삽입
INSERT INTO `movie_sq`.`screen_schedules`
(`movie_index`, `theater_index`, `screen_index`, `time_start`, `time_end`)
VALUES (1, 1, 1, '2023-06-25 07:00:00', '2023-06-25 08:00:00'),
       (1, 1, 1, '2023-06-25 08:00:00', '2023-06-25 09:00:00'),
       (1, 1, 2, '2023-06-26 07:00:00', '2023-06-26 08:00:00'),
       (1, 2, 3, '2023-06-26 08:00:00', '2023-06-26 09:00:00')
;


# 최종 좌석 테이블
CREATE TABLE IF NOT EXISTS `movie_sq`.`seats`
(
    `index`        INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
    `screen_index` INT(10) UNSIGNED NOT NULL,
    `seat_name`    VARCHAR(30)      NOT NULL,
    PRIMARY KEY (`index`),
    UNIQUE KEY (`screen_index`, `seat_name`),
    CONSTRAINT FOREIGN KEY (`screen_index`) REFERENCES `movie_sq`.`screens` (`index`)
        ON DELETE CASCADE
        ON UPDATE CASCADE
);


# 최종 좌석 예매 ""현황"" 테이블
CREATE TABLE `movie_sq`.`reservation_status`
(
    `index`          INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
    `schedule_index` INT(10) UNSIGNED NOT NULL,


    `screen_index`   INT UNSIGNED     NOT NULL, # 이녀석 때문


    `seat_name`      VARCHAR(30)      NOT NULL,

    CONSTRAINT PRIMARY KEY (`index`),
    CONSTRAINT UNIQUE KEY (`schedule_index`, `seat_name`),
    CONSTRAINT FOREIGN KEY (`schedule_index`, `screen_index`) REFERENCES `movie_sq`.`screen_schedules` (`index`, `screen_index`)
        ON DELETE CASCADE
        ON UPDATE CASCADE,
    CONSTRAINT FOREIGN KEY (`screen_index`, `seat_name`) REFERENCES `movie_sq`.`seats` (`screen_index`, `seat_name`)
        ON DELETE CASCADE
        ON UPDATE CASCADE
);







# 좌석 조회 (미완 및 연습)
SELECT *
FROM `movie_sq`.`seats` AS `A`
ORDER BY `A`.`index` ASC;

# 좌석 현황 조회
SELECT    `A`.`schedule_index`,
    COUNT(`A`.`schedule_index`) AS `SUM`
FROM `movie_sq`.`reservation_status` AS `A`
GROUP BY `A`.`schedule_index`;


SELECT
    `A`.`seat_name`
FROM `movie_sq`.`reservation_status` AS `A`
WHERE `A`.`schedule_index` = 1;


######################### reserve 관련 SELECT 조회 ####################################
# 테스트 테이블들 조회 연습
SELECT DISTINCT `B`.`title_ko` AS `영화이름`
FROM `movie_sq`.`screen_schedules` AS `A`
         LEFT JOIN `movie_sq`.`movies` AS `B` ON `A`.`movie_index` = `B`.`index`
WHERE `A`.time_start > NOW();

SELECT `B`.`name` AS `영화관이름`
FROM `movie_sq`.`screen_schedules` AS `A`
         LEFT JOIN `movie_sq`.`theaters` AS `B` ON `A`.theater_index = `B`.`index`
WHERE `A`.time_start > NOW()
GROUP BY `영화관이름`;

SELECT `B`.`name` AS `상영관이름`
FROM `movie_sq`.`screen_schedules` AS `A`
         LEFT JOIN `movie_sq`.`screens` AS `B` ON `A`.`screen_index` = `B`.`index`
WHERE `A`.time_start > NOW()
GROUP BY `상영관이름`;

SELECT `T`.`name` AS `영화관`, `M`.`title_ko` AS `영화`, DATE_FORMAT(`A`.`time_start`, '%Y년%m월%d일') AS `날짜`
FROM `movie_sq`.`screen_schedules` AS `A`
         LEFT JOIN `movie_sq`.`theaters` AS `T` ON `A`.`theater_index` = `T`.`index`
         LEFT JOIN `movie_sq`.`movies` AS `M` ON `A`.`movie_index` = `M`.`index`
WHERE `A`.`time_start` > NOW()
GROUP BY `영화관`;


# 지역 및 영화관 목록 조회
SELECT `T`.`region_category` AS `region`, `T`.`name` AS `theater`
FROM `movie_sq`.`screen_schedules` AS `A`
         LEFT JOIN `movie_sq`.`theaters` AS `T` ON `A`.`theater_index` = `T`.`index`
WHERE `A`.`time_start` > NOW()
GROUP BY `theater`
ORDER BY `theater` ASC;

# 영화 목록 조회
SELECT
    `M`.`index` AS `image`,
    `M`.`title_ko` AS `movie`,
    `R`.`title` AS `rating`
FROM `movie_sq`.`screen_schedules` AS `A`
         LEFT JOIN `movie_sq`.`movies` AS `M` ON `A`.`movie_index` = `M`.`index`
         LEFT JOIN `movie_sq`.`rating_notices` AS `R` ON `M`.`rating` = `R`.`rating`
WHERE `A`.`time_start` > NOW()
GROUP BY `movie`
ORDER BY `movie` ASC;


# 요일 목록 조회
# 날짜형=>문자형 변환 함수 DATE_FORMAT(날짜값, 문자열형식)
# 문자형=>날짜형 변환 함수 STR_TO_DATE(문자열, 형식)
SELECT `A`.`ymd` AS originTime,
       CONCAT(CASE
                  WHEN DAYNAME(`A`.`ymd`) = 'Monday' THEN '월'
                  WHEN DAYNAME(`A`.`ymd`) = 'Tuesday' THEN '화'
                  WHEN DAYNAME(`A`.`ymd`) = 'Wednesday' THEN '수'
                  WHEN DAYNAME(`A`.`ymd`) = 'Thursday' THEN '목'
                  WHEN DAYNAME(`A`.`ymd`) = 'Friday' THEN '금'
                  WHEN DAYNAME(`A`.`ymd`) = 'Saturday' THEN '토'
                  WHEN DAYNAME(`A`.`ymd`) = 'Sunday' THEN '일'
                  END,
              ' ',
              DATE_FORMAT(`A`.`ymd`, '%d')
           )     AS `day`

FROM (SELECT DISTINCT DATE_FORMAT(`S`.`time_start`, '%Y-%m-%d') AS `ymd`
      FROM `movie_sq`.`screen_schedules` AS `S`
      WHERE `S`.`time_start` > NOW()
      ORDER BY `ymd` ASC) AS `A`;
# FROM 절
SELECT DISTINCT DATE_FORMAT(`S`.`time_start`, '%Y-%m-%d') AS `ymd`
FROM `movie_sq`.`screen_schedules` AS `S`
WHERE `S`.`time_start` > NOW()
ORDER BY `ymd` ASC;


# 이런식 조회 가능하다
SELECT `screen_schedules`.`time_start`
FROM `movie_sq`.`screen_schedules`
WHERE DATE_FORMAT(`time_start`, '%Y%m%d') = '20230731';


# 영화관 공통값(영화, 요일 변수로) 조회
SELECT DISTINCT `B`.`name` AS `intersectiontheater`
FROM `movie_sq`.`screen_schedules` AS `A`
         LEFT JOIN `movie_sq`.`theaters` AS `B` ON `A`.theater_index = `B`.`index`
         LEFT JOIN `movie_sq`.`movies` AS `C` ON `A`.movie_index = `C`.`index`
WHERE IF('제이홉 인 더 박스 슈가: 로드 투 디데이' != '', `C`.`title_ko` = '제이홉 인 더 박스 슈가: 로드 투 디데이', TRUE) &&
      IF('' != '', DATE_FORMAT(`A`.`time_start`, '%Y-%m-%d') = '', TRUE);

# 영화 공통값(영화관, 요일 변수로) 조회
SELECT DISTINCT `B`.`title_ko` AS `intersectionMovie`
FROM `movie_sq`.`screen_schedules` AS `A`
         LEFT JOIN `movie_sq`.`movies` AS `B` ON `A`.movie_index = `B`.`index`
         LEFT JOIN `movie_sq`.`theaters` AS `C` ON `A`.theater_index = `C`.`index`
WHERE IF('CGV대구' != '', `C`.`name` = 'CGV대구', TRUE) &&
      IF('2023-07-28' != '', DATE_FORMAT(`A`.`time_start`, '%Y-%m-%d') = '2023-07-28', TRUE);

# 요일 공통값(영화관, 영화 변수로) 조회
SELECT DISTINCT DATE_FORMAT(`A`.`time_start`, '%Y-%m-%d') AS `intersectionTime`
FROM `movie_sq`.`screen_schedules` AS `A`
         LEFT JOIN `movie_sq`.`theaters` AS `B` ON `A`.`theater_index` = `B`.`index`
         LEFT JOIN `movie_sq`.`movies` AS `C` ON `A`.`movie_index` = `C`.`index`
WHERE IF('CGV대구' != '', `B`.`name` = 'CGV대구', TRUE) &&
      IF('범죄도시3' != '', `C`.`title_ko` = '범죄도시3', TRUE);


# 상영시간(상영관 리스트) 조회
SELECT `A`.`index`                                                                               AS `scheduleIndex`,
       CONCAT(DATE_FORMAT(`A`.`time_start`, '%H:%i'), '~', DATE_FORMAT(`A`.`time_end`, '%H:%i')) AS 'runningTime',
       `B`.`name`                                                                                AS `screenName`,
       `B`.`seat_total`                                                                          AS `seatTotal`,
       COUNT(`E`.`schedule_index`)                                                               AS `occupiedSeatTotal`
FROM `movie_sq`.`screen_schedules` AS `A`
         LEFT JOIN `movie_sq`.`screens` AS `B` ON `A`.`screen_index` = `B`.`index`
         LEFT JOIN `movie_sq`.`movies` AS `C` ON `A`.`movie_index` = `C`.`index`
         LEFT JOIN `movie_sq`.`theaters` AS `D` ON `A`.`theater_index` = `D`.`index`
         LEFT JOIN `movie_sq`.`reservation_status` AS `E` ON `A`.`index` = `E`.`schedule_index`
WHERE `D`.`name` = 'CGV대구' &&
      `C`.`title_ko` = '범죄도시3' &&
      DATE_FORMAT(`A`.`time_start`, '%Y-%m-%d') = '2023-07-28' &&
      `A`.`time_start` > NOW()
GROUP BY `E`.`schedule_index`; # 또는 GROUP BY `A`.`index`; 도 가능


# 인덱스 유효성 검사
SELECT
    COUNT(`A`.`index`) AS `Value`
FROM `movie_sq`.`screen_schedules` AS `A`
WHERE `A`.`time_start` > NOW() &&
      `A`.`index` = 1
LIMIT 1;

# 전 좌석 매진 조회(Form 버튼)
SELECT
    IF(COUNT(`A`.`schedule_index`) = `B`.`seat_total`, 1, 0) AS `countValue`
FROM `movie_sq`.`reservation_status` AS `A`
         LEFT JOIN `movie_sq`.`screens` AS `B` ON `A`.`screen_index` = `B`.`index`
WHERE `A`.`schedule_index` = 500;







############################ seat 관련 ###########################################################

# 상세정보 불러오기
SELECT
    CONCAT(`B`.`name`, ' ', `C`.`name`, ' ', `D`.`title_ko`, ' ', DATE_FORMAT(`A`.`time_start`, '%Y-%m-%d'), ' ', DATE_FORMAT(`A`.`time_start`, '%H:%i'), '~', DATE_FORMAT(`A`.`time_end`, '%H:%i')) AS `information`,
    `D`.`rating` AS `rating`
FROM `movie_sq`.`screen_schedules` AS `A`
         LEFT JOIN `movie_sq`.`theaters` AS `B` ON `A`.`theater_index` = `B`.`index`
         LEFT JOIN `movie_sq`.`screens` AS `C` ON `A`.`screen_index` = `C`.`index`
         LEFT JOIN `movie_sq`.`movies` AS `D` ON `A`.`movie_index` = `D`.`index`
WHERE `A`.`index` = 1
LIMIT 1;


# 미니맵 불러오기
SELECT
    `B`.`seats_map` AS `seatsMap`,
    `B`.`map_type` AS `mapType`
FROM `movie_sq`.`screen_schedules` AS `A`
         LEFT JOIN `movie_sq`.`screens` AS `B` ON `A`.`screen_index` = `B`.`index`
WHERE `A`.`index` = 15
LIMIT 1;


# 좌석 및 예약좌석 정보 불러오기
SELECT
    # `C`.`index`,
    `C`.`seat_name` AS `seatName`,
    IFNULL(`D`.`seat_name`, 'onSale') AS `reservedSeatName`
# `D`.`seat_name` AS `예약된좌석이름`
FROM `movie_sq`.`screen_schedules` AS `A`
         LEFT JOIN `movie_sq`.`screens` AS `B` ON `A`.`screen_index` = `B`.`index`
         LEFT JOIN `movie_sq`.`seats` AS `C` ON `B`.`index` = `C`.`screen_index`
         LEFT JOIN `movie_sq`.`reservation_status` AS `D` ON `D`.`schedule_index` = `A`.`index` && `D`.`seat_name` = `C`.`seat_name`
WHERE `A`.`index` = 1 &&
      `A`.`time_start` > NOW()
ORDER BY `C`.`index`;


# 존재하지 않는 좌석값인지 아닌지 확인
SELECT
    IF(COUNT(`B`.`seat_name`) = 1, 1, 0) AS `exitSeat`
FROM `movie_sq`.`screen_schedules` AS `A`
         LEFT JOIN `movie_sq`.`seats` AS `B` ON `A`.`screen_index` = `B`.`screen_index`
WHERE `A`.`index` = 1 &&
      `B`.`seat_name` = 'A1';


# 좌석 버튼 클릭시, 예약이 되어있는지 또 한번 조회
SELECT
    IF(COUNT(`A`.`seat_name`) = 1, 1, 0) AS `reservedSeat`
FROM `movie_sq`.`reservation_status` AS `A`
WHERE `A`.`schedule_index` = 1 &&
      `A`.`seat_name` = 'A1';


# 세션인덱스로 스크린 인덱스 값 가져오기
# 스케쥴 상영시간 유효 검사
SELECT
    IF(COUNT(`A`.`screen_index`) = 1, `A`.`screen_index`, 0) AS `screenIndex`
FROM `movie_sq`.`screen_schedules` AS `A`
WHERE `A`.`index` = 7 &&
      `A`.`time_start` > NOW();



















############ paymentMapper 관련 ####################
# seat_status에 좌석 insert하기
INSERT INTO `movie_sq`.`reservations` (`user_email`,
                                       `ticket_number`,
                                       `screen_schedule_index`,
                                       `ticket_total`,
                                       `reserved_seat_name`,
                                       `expired_flag`,
                                       `payment_amount`,
                                       `type_name`)
VALUES (
           #{userEmail},
           #{ticketNumber},
           #{screenScheduleIndex},
           #{ticketTotal},
           #{reservedSeatName},
           #{isExpired},
           #{paymentAmount},
           #{typeName}
       );

# reservation_status 테이블 insert하기
INSERT INTO `movie_sq`.`reservation_status` (`schedule_index`,
                                             `screen_index`,
                                             `seat_name`)
VALUES (
           #{sessionIndex},
           #{sessionScreenIndex},
           #{seatName}
       );



# 마이페이지 취소하기(삭제관련)
# DB 마리아에서 DELETE는 AS '대체이름' 사용이 불가능하다.
DELETE
FROM `movie_sq`.`reservation_status`
WHERE `movie_sq`.`reservation_status`.`schedule_index` = 21 &&
      `movie_sq`.`reservation_status`.`seat_name` = 'A1'
LIMIT 1;